#! /usr/bin/python
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Author: Marco Patander
# Date:   sept 2017
# Brief:  A remote shell over a serial connection to connect to remote shell
#
# Currently tested with an ash remote shell
# 

import sys
import tempfile
import binascii
import gzip
import shutil
import tarfile
import time
import uu
import os

import serial
#import codecs
#from serial.tools.list_ports import comports
#from serial.tools import hexlify_codec
import threading
import fileinput


def dump_serial_info(serial,out=sys.stdout):
  out.write("--- Settings: {p.name}  {p.baudrate},{p.bytesize},{p.parity},{p.stopbits}\n".format(
      p=serial))
  out.write('--- RTS: {:8}  DTR: {:8}  BREAK: {:8}\n'.format(
      ('active' if serial.rts else 'inactive'),
      ('active' if serial.dtr else 'inactive'),
      ('active' if serial.break_condition else 'inactive')))
  try:
    out.write('--- CTS: {:8}  DSR: {:8}  RI: {:8}  CD: {:8}\n'.format(
        ('active' if serial.cts else 'inactive'),
        ('active' if serial.dsr else 'inactive'),
        ('active' if serial.ri else 'inactive'),
        ('active' if serial.cd else 'inactive')))
  except serial.SerialException:
      # on RFC 2217 ports, it can happen if no modem state notification was
      # yet received. ignore this error.
      return self
  out.write('--- software flow control: {}\n'.format('active' if serial.xonxoff else 'inactive'))
  out.write('--- hardware flow control: {}\n'.format('active' if serial.rtscts else 'inactive'))



def fileblocks(input_file,blocksize,blockscount=None):
  count = 0
  while blockscount is None or count < blockscount:
    count += 1
    block = input_file.read(blocksize)
    if not block:
      break
    yield block
  

def hexlify(input_generator):
  for data in input_generator:
    yield binascii.b2a_hex(data)
  



#import curses
#class Console:
  #""" User interface """
  #def __init__(self):
    #pass
  
  

class Receiver:
  def __init__(self):
    self._reader_alive = False
  
  def start_reader(self):
    self._receiver_thread = threading.Thread(target=self.reader_loop,name='ReaderThread')
    self._receiver_thread.daemon = True
    self._receiver_thread.start()
  
  def stop_reader(self):
    self._reader_alive = False
    self.cancel_read()
    self._receiver_thread.join()
  
  def reader_loop(self):
    self._reader_alive = True
    while self._reader_alive:
      data = self._read_or_wait()
      if data:
        sys.stdout.write(data)
        sys.stdout.flush()


class SerialHandle(Receiver):
  def __init__(self,dev):
    self.notify = lambda s: sys.stdout.write(s+'\n')
    self.serial = dev
    if not hasattr(self.serial, 'cancel_read'):
      self.serial.timeout = 0.1
    #self.serial.port = dev
    self.execproxy = '/tmp/stdin'
    
    # the true name of Ba'al, the soul eater...
    self.unhexlify = 'sed \'s/\([0-9A-F]\{2\}\)/\\\\\\\\\\\\x\\1/gI\''
    
    
  def __enter__(self):
    self.serial.open()
    #dump_serial_info(self.serial)
    self.serial.write('SERIALRSH_SAVED_ECHO=$(stty -g);stty -echo\n')
    self.serial.flush()
    self.ignore_lines = 1
    time.sleep(0.2)
    self.start_reader()
    return self
    
  def __exit__(self,t,val,tb):
    self.serial.flush()
    time.sleep(0.1)
    self.stop_reader()
    self.serial.write('stty $SERIALRSH_SAVED_ECHO;unset SERIALRSH_SAVED_ECHO\n')
    self.serial.flush()
    self.serial.close()
  
  def cancel_read(self):
    if hasattr(self.serial, 'cancel_read'):
      self.serial.cancel_read()
  
  def _read_or_wait(self):
    # TODO if possible ignore lines, fixing race with remote
    #while True:
    data = self.serial.read(self.serial.in_waiting or 1)
    if not self._reader_alive:
      # flush some pending output...
      # TODO wait last codeline completion... but how to know when it completes?
      while data:
        sys.stdout.write(data)
        sys.stdout.flush()
        data = self.serial.read(self.serial.in_waiting)
        if not data:
          time.sleep(0.1)
          data = self.serial.read(self.serial.in_waiting)
      #if self.ignore_lines > 0:
        #lf_cnt = data.count('\n')
        #if lf_cnt >= self.ignore_lines:
          #lines = data.split('\n')
          #data = '\n'.join(lines[lf_cnt-self.ignore_lines:])
        #else:
          #data = None
        #self.ignore_lines -= lf_cnt
      #if data or not self._reader_alive:
        #break
    return data
  
  
  def _upload(self,input_generator,cmd_pre,cmd_exec,cmd_post):
    if cmd_pre:
      cmd_pre()
    for data in input_generator:
      self.serial.write(data)
      self.serial.flush()
      if cmd_exec:
        cmd_exec(data)
    if cmd_post:
      cmd_post()
  
  
  def upload_filepart(self,input_generator,remote_filename):
    def _pre():
      self.serial.write('cat > {0}.part\n'.format(remote_filename))
      self.serial.flush()
    def _exec(data):
      self._send_eot()
      self.serial.flush()
      self.serial.write('cat {0}.part >> {0}\n'.format(remote_filename))
      self.serial.flush()
    def _post():
      self.serial.write('rm {0}.part\n'.format(remote_filename))
      self.serial.flush()
    self._upload(input_generator,_pre,_exec,_post)
  
  def hexlify_upload_filepart(self,input_generator,remote_filename):
    def _pre():
      self.serial.write('{0}|xargs printf > {1}.part\n'.format(self.unhexlify,remote_filename))
      self.serial.flush()
    def _exec(data):
      self._send_eot()
      self.serial.flush()
      self.serial.write('cat {0}.part >> {0}\n'.format(remote_filename))
      self.serial.flush()
    def _post():
      self.serial.write('rm {0}.part\n'.format(remote_filename))
      self.serial.flush()
    self._upload(hexlify(input_generator),_pre,_exec,_post)
    
  def _hexlify_upload(self,input_file_,remote_filename,translator_post,translator_pre='',blocksize=1024,splitcount=1):
    input_file = input_file_
    if isinstance(input_file_,str):
      input_file = open(input_file_,'rb')
    input_file.seek(0,2)
    file_size=input_file.tell()
    input_file.seek(0)
    total = 0
    def _pre():
      self.serial.write('{1}{0}{2}\n'.format(self.unexlify,translator_pre,translator_post))
      self.serial.flush()
    def _exec(data):
      total += len(data)/2
      self.notify('File transfer progress: {:>3}%'.format(total*100/file_size))
    def _post():
      self._send_eot()
      self.serial.flush()
    if splitcount == 0:
      self._upload(hexlify(fileblocks(input_file,blocksize)),_pre,_exec,_post)
    else:
      while total != file_size:
        self.hexlify_upload_filepart(fileblocks(input_file,blocksize,splitcount),remote_filename+'.download')
        total = input_file.tell()
        self.notify('File transfer progress: {:>3}% ({}/{})'.format(total*100/file_size,total,file_size))
    self.serial.write('mv {0}.download {0}\n'.format(remote_filename))
    self.serial.flush()
    self.notify('File upload completed ({0} bytes)!'.format(total))
    if isinstance(input_file_,str):
      input_file.close()
    
  
  
  def _send_eot(self,n=3):
    self.serial.write(''.join(['\x04']*n))
  
  # Correct uuencoding available only in python 3.7 (changes in binascii)
  if sys.version_info >= (3.7):
    def upload_file_uuencoding(self,input_file,remote_filename,blocksize=1024,splitted=False):
      with tempfile.NamedTemporaryFile() as encoded_file:
        self.notify('Encoding file, please wait...')
        uu.encode(input_file,encoded_file,backtick=True)
        encoded_file.flush()
        encoded_file.seek(0,2)
        file_size=encoded_file.tell()
        encoded_file.seek(0)
        total = 0
        if splitted:
          while True:
            total += self.upload_filepart(encoded_file,remote_filename+'.download',blocksize,1)
            if total == file_size:
              break
            self.notify('File transfer progress: {:>3}%'.format(total*100/file_size))
          self.notify('File transfer complete, decoding...')
          self.serial.write('uudecode -o {0} {0}.download\n'.format(remote_filename))
          #self.serial.write('rm {0}.download\n'.format(remote_filename))
          self.serial.flush()
        else:
          self.serial.write('uudecode > '+remote_filename+'\n')
          self.serial.flush()
          while True:
            block = encoded_file.read(blocksize)
            if not block:
              break
            total += len(block)
            self.serial.write(block)
            self.serial.flush()
            self.notify('File transfer progress: {:>3}%'.format(total*100/file_size))
          self._send_eot()
          self.serial.flush()
        self.notify('File upload completed ({0} bytes)!'.format(total))
  
  
  def _hexlify_send(self,input_string,translator_post,translator_pre='',blocksize=1024):
    #file_size=len(input_string)
    total = 0
    self.serial.write('{1}{0}{2}\n'.format(self.unhexlify,translator_pre,translator_post))
    self.serial.flush()
    self.serial.write(binascii.b2a_hex(input_string))
    self._send_eot()
    #self.serial.write('\n')
    self.serial.flush()
    #self.notify('File upload completed ({0} bytes)!'.format(total))
  
  
  def execute(self,code):
    self._hexlify_send(code,translator_post='|xargs printf > {0};source {0};rm {0}'.format(self.execproxy))
  
  def subshell_execute(self,code):
    self._hexlify_send(code,translator_post='|xargs printf|sh')
  
  def upload_file(self,input_file,remote_filename,blocksize=1024):
    #self._hexlify_upload(input_file,translator_post='|xargs printf > '+remote_filename,blocksize=blocksize)
    self._hexlify_upload(input_file,remote_filename,translator_post=remote_filename,blocksize=blocksize)
  
  def upload_file_gzip(self,input_file,remote_filename,blocksize=1024,overwrite=False):
    with tempfile.NamedTemporaryFile() as temp_file:
      remote_filename_gz = remote_filename+'.gz'
      with gzip.open(temp_file.name,'wb') as compressed_file:
        self.notify('Compressing file, please wait...')
        if isinstance(input_file,str):
          with open(input_file,'rb') as input_file_obj:
            shutil.copyfileobj(input_file_obj,compressed_file)
        else:
          shutil.copyfileobj(input_file,compressed_file)
      temp_file.seek(0)
      self.upload_file(temp_file,remote_filename_gz,blocksize=blocksize)
      self.notify('Decompressing file, please wait...')
      if overwrite:
        self.serial.write('rm {0} 2> /dev/null\n'.format(remote_filename))
      " gunzip automatically removes its input, but it may fail "
      self.serial.write('gunzip {0} || rm {0}\n'.format(remote_filename_gz))
      self.serial.flush()
      self.notify('Upload complete!')
  
  def upload_folder_tar(self,input_path,remote_path,compression='gz',options='o',blocksize=1024):
    remote_filename = remote_path+'.tar'
    if compression == 'gz':
      remote_filename = remote_filename+'.gz'
      decompress='zcat '+remote_filename+' |'
      tar_output='-'
    else:
      decompress=''
      tar_output=remote_filename
      compression=''
    with tempfile.NamedTemporaryFile() as temp_file:
      compressed_file = tarfile.open(temp_file.name,'w:'+compression)
      compressed_file.add(input_path,arcname=remote_path)
      compressed_file.close()
      temp_file.seek(0)
      self.upload_file(temp_file.name,remote_filename,blocksize)
      self.notify('Decompressing file, please wait...')
      self.serial.write(decompress+'tar -x{1}f {0};rm {2}\n'.format(tar_output,options,remote_filename))
      self.serial.flush()
      self.notify('Upload complete!')
      
  
def serialrsh_exec(serial,code,**unused):
  #serial.execute(code)
  ##if isinstance(code,str):
  ##serial.execute(code)
  ##for line in fileinput.input(['-']):
  ##  serial.execute(line)
  if code != '-':
    serial.execute(code)
    return
  for line in fileinput.input(['-']):
    serial.execute(line)
  


def serialrsh_subexec(serial,code,**unused):
  serial.subshell_execute(code)

def serialrsh_upload(serial,source,destination,compression='gz',force=False,**unused):
  if isinstance(source,str) and os.path.isdir(source):
    return serial.upload_folder_tar(source,destination,compression)
  if compression == 'gz':
    return serial.upload_file_gzip(source,destination,overwrite=force)
  return serial.upload_file(source,destination)

def serialrsh_sleep(time_seconds,**unused):
  time.sleep(time_seconds)


import argparse

def execute(argv=sys.argv[1:]):
  """Command line tool entry point"""
  commands_parser = argparse.ArgumentParser(description='Connect to a remote linux/unix-like OS using the serial')
  subparsers = commands_parser.add_subparsers(title='Commands list',help='Available commands')
  exec_parser = subparsers.add_parser('exec',help='Exec commands in remote device')
  exec_parser.add_argument('code',metavar='code',type=str,help='Code to be executed')
  exec_parser.set_defaults(func=serialrsh_exec)
  upload_parser = subparsers.add_parser('upload',help='Upload a file/folder to remote device')
  upload_parser.add_argument('--compression',dest='compression',default='gz',choices=['none','gz'],help='Compress data during transmission')
  upload_parser.add_argument('-f',dest='force',action='store_true',help='Overwrite existing destinations')
  upload_parser.add_argument('source',metavar='src',type=str,help='Local file/folder to copy')
  upload_parser.add_argument('destination',metavar='dst',type=str,help='Remote destination')
  upload_parser.set_defaults(func=serialrsh_upload)
  sleep_parser = subparsers.add_parser('sleep',help='Local sleep for some time')
  sleep_parser.add_argument('time_seconds',type=float,help='Time to sleep (in seconds)')
  sleep_parser.set_defaults(func=serialrsh_sleep)
  
  main_parser = commands_parser
  main_parser.add_argument('--device',dest='serial',metavar='dev',type=str,default='/dev/ttyUSB0',help='Port device')
  main_parser.add_argument('--baudrate',dest='baudrate',metavar='baudps',type=int,default=115200,help='Baud rate')
  #main_parser.add_argument('command',metavar='cmd',type=str,nargs=1,help='Command to execute')
  
  
  #args = parser.parse_args(argv)
  #args.func(**vars(args))
  [args,rest] = main_parser.parse_known_args(argv)
  with SerialHandle(serial.serial_for_url(args.serial,args.baudrate,
                            bytesize=serial.EIGHTBITS,
                            parity=serial.PARITY_NONE,
                            stopbits=serial.STOPBITS_ONE,
                            xonxoff=False,rtscts=False,
                            do_not_open=True)) as serial_device:
    while True:
      args.serial = serial_device
      args.func(**vars(args))
      if not rest:
        break
      [args, rest] = commands_parser.parse_known_args(rest)
  sys.stdout.write('\n')


if __name__ == '__main__':
  execute()



